Lecture 12 	node.js(3): NPM and express.js

00:01:05		7 条原则 - RESTful API
00:04:13		sequence diagram 时序图，从上向下时间轴
00:05:51		Microservices - 与传统架构不同 - 不会因为一个模块出问题，就造成整体服务器/网站不可用
00:10:40		每个微服务可能都会使用不同的数据库，数据库之间没有联系
00:14:40		API 的授权与验证 - 带上 token 访问后端，后端验证 token 1. 是否存在，2. 是否有效，3. 是否有权限访问相关的资源
00:17:18		3 个验证都通过才返回数据，否则把请求驳回
00:17:55		token 有的放 local storage - 方便，有的放 cookies - 安全。都不完全安全，看 dev 个人偏好。
00:19:50		一个 token 有有效时间、会过期；一旦过期就不再有效，需要重新做登录。
00:20:00		网站使用第三方登录验证，比如谷歌
00:23:00		token 没有状态，session 有状态 - session 信息存在 cookies 里面，token 可以脱离浏览器照样用 http 访问
00:25:10		newsapi.org 注册账号，并下载 Postman
00:28:04		Postman 主要用途 - query, authorisation: Bearer Token - add to "Headers"
00:33:30		JSON 格式的数据广泛被接受，如果格式不对，会显示红色波浪线 - 问题在哪？
00:36:10		response 最重要的部分是 body，然后是状态码：成功还是失败？Headers 不会专门查，除非 debug
00:37:44		collection 收藏夹。不需要再次手动填写所有数据，而是通过点击 collection 直接使用。
00:38:38		environment 环境，可以在左边选中、做修改。环境可以在请求中应用。切换环境可以快速改变变量值，不需要手动改 url
00:41:00		NewsAPI Documentation 如何阅读？产品说明书，看基本功能。
00:42:30		News API - simple HTTP REST API. 关心 Endpoints 有哪些？
00:46:20		自定义 API key 在前面加个 X；授权 header 前面加 Bearer - Bearer Token 最规范
00:50:30		返回错误信息时，一定要 human-readable
01:00:00		可以取巧，一页只显示 3 条
01:03:45		News API Request parameters - Australia au/aus, q keyword
01:09:00		Mason 写了抓 Pokemon 的 API，建议专门建一个 collection 来做抓 Pokemon
01:17:52		Pokenmon - 访问 pocketmon.onrender.com，创建一个新的 tab
01:18:40		/v1/trainers/ - POST；在 body 里面放 name, password, gender, language
01:19:32		POST request - body, raw, JSON - curly brackets on outside
01:20:44		返回 response，创建成功，保存 id 和 token
01:22:05		/v1/instructions/next - Authorization: Bearer Token
01:23:15		下一步有两种选择，其一是 duplicate，会保留很多信息；把 POST 改为 GET，2. get full list of trainers
01:24:54		再下一步，找到自己的 trainer；从 1. Create Trainer 复制信息
01:41:15		4. Update my trainer - PUT method - 修改数据
01:41:40		5. Find Pokemon
01:44:10		6. Capture Pokemon
01:46:20		4. 的目的是更新 Trainer 的性别和语言信息；设定里不能改名字。
01:50:32		带到这里，后续自己看 instructions 操作
01:55:20		下节课下课后带着大家写最简单的脚本；现在回到正课内容上
01:57:20		原生 AJAX 太古老，现在不太用，所以课上不带看
02:03:20		这节课的重点是 Express.js，后续会用来搭建所有的框架
02:04:40		NPM 是世界最大的软件登记处
02:06:24		P3 里面如果能应用 TypeScript，那么非常好；但是课上不会教；所有公司都会使用 TypeScript.
02:09:00		测试一个新的 package 好不好用，最好用 codesandbox 和 stackblitz 之类的沙盒，如果好用再用到项目上。
02:12:40		MIT 是最开放的 licence；每周下载量是低优先级的参考；Star 是收藏数量，1 千以上比较安全。
02:13:15		Issues 看看有没有开发者/热心网友在维护；上次 pull request 是多久之前？
02:14:15		最关键还是要在沙盒中测试，如果合适再在项目中使用。
02:18:25		npm init -y 全部使用默认值
02:27:45		package-lock.json 记录版本
02:29:55		yarn 首先解决了 package-lock 的问题，所以大部分用户分流到了 yarn，现在也是一半一半
02:30:25		课程中只用 npm，但是 P3 中自选
02:33:10		学员提问：不要手动改 dependencies? 项目一开始确实可以复制粘贴，但不多。
02:35:30		通常是碰到需要用，再去安装。
02:36:00		create-react-app 是一个 cli tool，帮助我们创建最基本的一个框架，里面会安装所有的 packages
02:39:15		vulnerabilities 每个 package 发布时，安全专家会发现漏洞。package 更新时会把漏洞补上，但旧版本仍然有。
02:45:05		版本分为 3 部分，中间用 . 隔开。Major.minor.patch
02:45:30		patch 举例：返回字符串中有小的 bug，做一个 fix，数字加一
02:46:00		minor 增加新的 feature，加一；major 删除旧的 feature，改动。
02:47:13		版本号前的符号，^ 在安装 package 时，想要当前 major 版本下的最新版本。major 数字固定住。
02:48:25		如果没有 package-lock.json，会安装最新版本 4.18.2；如果有，会安装 4.16.4
02:49:00		~ 在安装 package 时，想要当前 major.minor 版本下的最新版本。major.minor 数字固定住。
02:53:20		更新版本前，做好 git control
02:54:25		程序更新的一条准备：如果没坏，就别动它；vulnerability 也是一样；但 Canva 有主动维护的团队
02:56:16		不同的 3 种 dependencies: dependencies, dev dependencies, global dependencies
02:57:20		dependencies 是运行程序时一定需要的；dev dependencies 是开发时一定需要的
02:58:19		nodemon 可以帮我们自动重启，检测到文件差别时会重启服务器。只有开发时需要，production 里不需要
03:02:00		npx 临时全局安装，不安装到系统里面，但可以临时使用最新版本。npx 完美取代 -g
03:08:45		不是每只 Pokemon 都可以 special evolve，需要多找一找。
03:11:00		Pokemon 最大的意义是帮助学员熟悉 Postman，看 API 返回的东西是不是我们想要的；以及 RESTful API 的设计。
03:12:49		News API 的目的和 P2 的 weather API 是一样的，用来获取数据